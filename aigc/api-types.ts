/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ideatech/knowledge/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Knowledge
         * @description search_knowledge_base
         */
        post: operations["knowledge_ideatech_knowledge__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ideatech/sample": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Sample Batch
         * @description 返回 insert / update 类型的模型判定样本，用于人工标注处理。
         *     自动排除已标注或已入库模板的样本。
         */
        post: operations["get_sample_batch_ideatech_sample_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ideatech/templates/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Templates
         * @description 查询模板，支持筛选路径、来源、状态。
         */
        get: operations["list_templates_ideatech_templates_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ideatech/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm Action
         * @description 确认分类并更新模板库,人工确认 insert/update 的操作, status True 表示同意，False 表示拒绝
         */
        post: operations["confirm_action_ideatech_confirm_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Table */
        get: operations["list_table_table_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/{table_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show Table Form */
        get: operations["show_table_form_table__table_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/submit/{table_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit Data */
        post: operations["submit_data_table_submit__table_name__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/view/{table_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** View Table Data */
        get: operations["view_table_data_table_view__table_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/table/delete/{table_name}/{row_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Delete Data */
        get: operations["delete_data_table_delete__table_name___row_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/send_wechat_code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Send Verification Code */
        get: operations["send_verification_code_send_wechat_code_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register User
         * @description 如果提供了 eth_address 或 public_key，则不强制提供密码。
         *     如果提供了 username 或 uuid，并且没有提供 eth_address 或 public_key，则需要提供密码进行注册。
         */
        post: operations["register_user_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate User
         * @description 登录路由，颁发访问令牌和刷新令牌,令牌生成 login_for_access_token,
         *     如果 eth_address 或 public_key 认证成功，通过公钥验证签名则不需要密码。
         *     使用 username 或 uuid 和密码登录。
         */
        post: operations["authenticate_user_authenticate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protected": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Protected
         * @description 防止伪造 API Key,防止请求内容被篡改,防止重放攻击（时间戳）,避免签名泄露,HMAC 使用安全算法（SHA256）
         */
        post: operations["protected_protected_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/secure": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Secure Route */
        post: operations["secure_route_secure_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/refresh_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh Access Token */
        post: operations["refresh_access_token_refresh_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** System Status */
        get: operations["system_status_status__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Logs Info */
        get: operations["get_logs_info_logs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin */
        get: operations["admin_admin__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** User */
        get: operations["user_user__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Push Redis Data */
        post: operations["push_redis_data_data_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Redis Value */
        get: operations["read_redis_value_get__key__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delete/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Redis Key */
        delete: operations["delete_redis_key_delete__key__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pip/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Install Packages Import
         * @description /install?q=numpy,matplotlib==3.7.1
         */
        get: operations["install_packages_import_pip_install_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pip/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Pip List */
        get: operations["pip_list_pip_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Healthcheck */
        get: operations["healthcheck_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/route_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Routes */
        get: operations["list_routes_route_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mcp_tool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Mcp Tool */
        get: operations["get_mcp_tool_mcp_tool_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/retrieval/{text}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieval */
        get: operations["retrieval_retrieval__text__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extract/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Extract */
        get: operations["extract_extract__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/embeddings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Embeddings */
        post: operations["embeddings_embeddings_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fuzzy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fuzzy Matches */
        post: operations["fuzzy_matches_fuzzy_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/classify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Classify Text */
        post: operations["classify_text_classify_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/create_embeddings_collection/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Create Embeddings Collection */
        get: operations["create_embeddings_collection_create_embeddings_collection__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/upsert_embeddings_points": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upsert Embeddings Points */
        post: operations["upsert_embeddings_points_upsert_embeddings_points_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search_embeddings_points": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search Embeddings Points */
        post: operations["search_embeddings_points_search_embeddings_points_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recommend_points": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Recommend Points */
        post: operations["recommend_points_recommend_points_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nlp/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Nlp */
        get: operations["nlp_nlp__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/markdown/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Markdown */
        get: operations["get_markdown_markdown__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/prompts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Prompts */
        post: operations["get_prompts_prompts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Tools
         * @description 返回 OpenAI 兼容的 tools 定义，并调用模型接口后解析执行结果。
         *     如果 request.tools 为空且 request.user 存在，则从 Redis 获取用户缓存的 tools。否则调用 AI 自动生成 tool 元数据。
         *     最终根据 messages 与 tools 调用大模型，解析 tool_call 执行结果并返回。
         */
        post: operations["get_tools_tools_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate Metadata From Code */
        post: operations["generate_metadata_from_code_metadata_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agent/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Agent Run */
        post: operations["agent_run_agent__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assistant/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assistant Run */
        post: operations["assistant_run_assistant__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Handle Callback */
        post: operations["handle_callback_callback_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate Batch Text */
        post: operations["generate_batch_text_llm_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/message/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate Message */
        post: operations["generate_message_message__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/embeddings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Embeddings */
        post: operations["get_embeddings_v1_embeddings_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Completions */
        post: operations["completions_v1_completions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Chat Completions
         * @description 兼容 OpenAI API 的 /v1/chat/completions 路径，返回类似 OpenAI API 的格式
         */
        post: operations["chat_completions_v1_chat_completions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Models */
        get: operations["get_models_v1_models_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Chat Page */
        get: operations["chat_page_chat_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get_messages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Messages */
        get: operations["get_messages_get_messages__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submit_messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit Messages */
        post: operations["submit_messages_submit_messages_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/message/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Response Message */
        get: operations["response_message_message__task_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Task Status */
        get: operations["get_task_status_task__task_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/execute/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute Task */
        post: operations["execute_task_task_execute__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/location/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Location */
        get: operations["search_location_location__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/translate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Translate Text */
        post: operations["translate_text_translate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload File */
        post: operations["upload_file_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{filename}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** File Handler */
        get: operations["file_handler_files__filename__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/send_wechat_scheduler": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Wechat Scheduler */
        post: operations["send_wechat_scheduler_send_wechat_scheduler_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Send Page */
        get: operations["send_page__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/extract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Extract Conversations */
        post: operations["extract_conversations_conversations_extract_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Filter Conversations */
        post: operations["filter_conversations_conversations_filter_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Summary Extract Text */
        post: operations["summary_extract_text_summary_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Image Recognition */
        post: operations["image_recognition_ocr_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/visual": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate Image */
        post: operations["generate_image_visual_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/asr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Speech To Text */
        post: operations["speech_to_text_asr_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Text To Audio */
        post: operations["text_to_audio_tts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tti": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Text To Image */
        post: operations["text_to_image_tti_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/iu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Image Understanding */
        post: operations["image_understanding_iu_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Files Process
         * @description 接收文件并调用 AI 模型处理,基于文件内容生成消息。
         *
         *     :param files: 上传的文件列表
         *     :param model_name: 模型名称
         *     :return: AI 处理结果
         */
        post: operations["files_process_fp_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ppt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Ppt Create */
        get: operations["ppt_create_ppt_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AgentRequest */
        AgentRequest: {
            /** Messages */
            messages?: components["schemas"]["ChatMessage"][] | null;
            /** User */
            user?: string | null;
            /**
             * Model
             * @default deepseek-chat
             */
            model: string | null;
            /** @description 外部函数调用信息 */
            callback?: components["schemas"]["CallbackUrl"] | null;
        };
        /** AssistantRequest */
        AssistantRequest: {
            /** Question */
            question: string;
            /**
             * Prompt
             * @default You are a personal math tutor. Write and run code to answer math questions.
             */
            prompt: string;
            /**
             * User Name
             * @default test
             */
            user_name: string;
            /** @default code_interpreter */
            tools_type: components["schemas"]["AssistantToolsEnum"];
            /**
             * Model Id
             * @default 4
             */
            model_id: number;
        };
        /**
         * AssistantToolsEnum
         * @enum {string}
         */
        AssistantToolsEnum: "code_interpreter" | "web_search" | "function_calling";
        /**
         * AuthRequest
         * @example {
         *       "password": "123456",
         *       "public_key": "0x123456789ABCDEF",
         *       "username": "test"
         *     }
         */
        AuthRequest: {
            /** Eth Address */
            eth_address?: string | null;
            /** Signed Message */
            signed_message?: string | null;
            /** Original Message */
            original_message?: string | null;
            /** Username */
            username?: string | null;
            /** Password */
            password?: string | null;
            /** Public Key */
            public_key?: string | null;
            /** Code */
            code?: string | null;
        };
        /** Body_extract_conversations_conversations_extract_post */
        Body_extract_conversations_conversations_extract_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_files_process_fp_post */
        Body_files_process_fp_post: {
            /** Files */
            files: string[];
        };
        /** Body_filter_conversations_conversations_filter_post */
        Body_filter_conversations_conversations_filter_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_generate_image_visual_post */
        Body_generate_image_visual_post: {
            /**
             * File
             * Format: binary
             */
            file?: string;
            /** Image Urls */
            image_urls?: string[];
            /** Prompt */
            prompt?: string;
        };
        /** Body_image_recognition_ocr_post */
        Body_image_recognition_ocr_post: {
            /**
             * File
             * Format: binary
             */
            file?: string;
            /** Image Url */
            image_url?: string;
        };
        /** Body_image_understanding_iu_post */
        Body_image_understanding_iu_post: {
            request?: components["schemas"]["CompletionParams"] | null;
            /** Files */
            files: string[];
        };
        /** Body_knowledge_ideatech_knowledge__post */
        Body_knowledge_ideatech_knowledge__post: {
            /**
             * File
             * Format: binary
             */
            file?: string;
        };
        /** Body_send_wechat_scheduler_send_wechat_scheduler_post */
        Body_send_wechat_scheduler_send_wechat_scheduler_post: {
            /**
             * File
             * Format: binary
             */
            file?: string;
        };
        /** Body_speech_to_text_asr_post */
        Body_speech_to_text_asr_post: {
            /**
             * File
             * Format: binary
             */
            file?: string;
            /** File Urls */
            file_urls?: string[];
        };
        /** Body_submit_data_table_submit__table_name__post */
        Body_submit_data_table_submit__table_name__post: {
            /** Edit Id */
            edit_id?: string | null;
        };
        /** Body_summary_extract_text_summary_post */
        Body_summary_extract_text_summary_post: {
            request: components["schemas"]["SummaryRequest"];
            /**
             * File
             * Format: binary
             */
            file?: string;
        };
        /** Body_upload_file_upload_post */
        Body_upload_file_upload_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_upsert_embeddings_points_upsert_embeddings_points_post */
        Body_upsert_embeddings_points_upsert_embeddings_points_post: {
            /** Payloads */
            payloads: Record<string, never>[];
            /** Inputs */
            inputs: string[] | null;
        };
        /**
         * CallbackUrl
         * @example {
         *       "format": "json",
         *       "url": "http://127.0.0.1:7000/callback"
         *     }
         */
        CallbackUrl: {
            /**
             * Format
             * @default json
             * @enum {string}
             */
            format: "query" | "json" | "form";
            /** Url */
            url?: string | null;
            /** Payload */
            payload?: {
                [key: string]: string | number;
            } | null;
            /** Mapping */
            mapping?: {
                [key: string]: string | number;
            } | null;
            /** Params */
            params?: {
                [key: string]: string;
            } | null;
            /** Headers */
            headers?: {
                [key: string]: string;
            } | null;
        };
        /**
         * ChatCompletionRequest
         * @example {
         *       "agent": "0",
         *       "extract": "wechat",
         *       "filter_limit": -500,
         *       "filter_time": 0,
         *       "images": [],
         *       "keywords": [
         *         "区块链"
         *       ],
         *       "max_tokens": 1024,
         *       "messages": [],
         *       "model_id": 0,
         *       "model_name": "deepseek",
         *       "prompt": "",
         *       "question": "什么是区块链金融?",
         *       "stream": false,
         *       "temperature": 0.4,
         *       "tools": [
         *         {
         *           "intent_search": {
         *             "count": "10",
         *             "engine": "search_std",
         *             "recency_filter": "noLimit",
         *             "search_intent": true,
         *             "text": "什么是区块链金融"
         *           },
         *           "type": "intent_search"
         *         },
         *         {
         *           "type": "web_search"
         *         }
         *       ],
         *       "top_p": 0.8,
         *       "use_hist": false,
         *       "user": "test"
         *     }
         */
        ChatCompletionRequest: {
            /**
             * Stream
             * @description Whether to stream the response
             * @default false
             */
            stream: boolean;
            /**
             * Temperature
             * @description Temperature for response generation
             * @default 0.8
             */
            temperature: number;
            /**
             * Top P
             * @description The probability threshold setting for the model.
             * @default 0.8
             */
            top_p: number;
            /**
             * Max Tokens
             * @description Maximum number of tokens the model can generate.
             * @default 1024
             */
            max_tokens: number | null;
            /**
             * Prompt
             * @description The initial system content or prompt used to guide the AI's response.
             */
            prompt?: string | null;
            /**
             * Question
             * @description The primary question or prompt for the AI to respond to. If `messages` are provided, this field will be automatically overridden by the last user message content in `messages`. Otherwise, this `question` field will be used directly as the prompt for the AI.
             */
            question?: string | null;
            /**
             * Agent
             * @description System content identifier. This index represents different scenarios or contexts for AI responses, allowing the selection of different system content.
             */
            agent?: string | null;
            /**
             * Suffix
             * @description The suffix for the AI to respond to completion.
             */
            suffix?: string | null;
            /**
             * Extract
             * @description Response Format,The type of content to extract from response(e.g., code.python,code.bash,code.cpp,code.sql,json,header,links)
             */
            extract?: string | string[] | null;
            /** @description Callback info: a URL string or a dict with url and optional payload,params,headers */
            callback?: components["schemas"]["CallbackUrl"] | null;
            /**
             * Model Name
             * @description Specify the name of the model to be used. It can be any available model, such as 'moonshot', 'glm', 'qwen', 'ernie', 'hunyuan', 'doubao','spark','baichuan','deepseek', or other models.
             * @default moonshot
             */
            model_name: string;
            /**
             * Model Id
             * @description Model ID to be used
             * @default 0
             */
            model_id: number;
            /**
             * Keywords
             * @description A list of keywords or tuples of (keyword, function, *args,*kwargs) used to search for relevant information across various sources, A list of tools represented as tuples, where each tuple consists of a callable and its corresponding arguments. such as online searches, database queries, or vector-based search systems. These keywords help guide the retrieval of data based on the specific terms provided.
             */
            keywords?: (string | [
                string,
                unknown
            ] | [
                string,
                unknown[]
            ] | [
                string,
                Record<string, never>
            ] | [
                string,
                unknown[],
                Record<string, never>
            ])[] | null;
            /**
             * Tools
             * @description This allows the AI to call specific functions with the provided arguments to perform tasks such as data processing, API calls, or other utility operations. Each tool can be invoked to enhance the AI's capabilities and provide more dynamic responses based on the context.
             */
            tools?: Record<string, never>[] | null;
            /** Images */
            images?: string[] | null;
            /** Request Id */
            request_id?: string | null;
            /** Name */
            name?: string | null;
            /** User */
            user?: string | null;
            /** Robot Id */
            robot_id?: string | null;
            /**
             * Use Hist
             * @description use historical messages.
             * @default false
             */
            use_hist: boolean;
            /**
             * Filter Limit
             * @description The limit count(<0) or max len(>0) to filter historical messages.
             * @default -500
             */
            filter_limit: number | null;
            /**
             * Filter Time
             * @description The timestamp to filter historical messages.
             * @default 0
             */
            filter_time: number;
            /**
             * Messages
             * @description A list of message objects representing the current conversation. If no messages are provided and `use_hist` is set to `True`, the system will filter existing chat history using the fields `name`, `user`, and `filter_time`. If `messages` are provided, the last user message will be used as the question.
             */
            messages?: components["schemas"]["ChatMessage"][] | null;
        };
        /** ChatMessage */
        ChatMessage: {
            /**
             * Role
             * @enum {string}
             */
            role: "system" | "user" | "assistant" | "developer" | "tool";
            /** Content */
            content: string | {
                [key: string]: string | {
                    [key: string]: string;
                };
            }[];
            /** Name */
            name?: string | null;
        };
        /**
         * ClassifyRequest
         * @example {
         *       "class_default": "聊天",
         *       "class_terms": {
         *         "商机录入": [
         *           "商机录入",
         *           "商机信息",
         *           "录入商机",
         *           "商机跟进",
         *           "商机记录"
         *         ],
         *         "新增客户信息": [
         *           "新增客户",
         *           "添加客户",
         *           "客户信息",
         *           "客户录入",
         *           "客户添加"
         *         ],
         *         "未验收的项目数": [
         *           "待验收的项目数",
         *           "尚未验收的项目数",
         *           "未完成验收的项目数",
         *           "未交付的项目数",
         *           "验收未完成的项目数"
         *         ],
         *         "本季度计划验收的项目数": [
         *           "本季度预定验收的项目数量",
         *           "本季度预计完成验收的项目数",
         *           "本季度计划验收的项目数",
         *           "本季度安排验收的项目数",
         *           "本季度计划交付的项目数量"
         *         ],
         *         "查询回款额": [
         *           "回款额查询",
         *           "查询回款额",
         *           "回款情况",
         *           "回款金额",
         *           "回款记录"
         *         ],
         *         "查询销售额": [
         *           "销售额查询",
         *           "查询销售额",
         *           "销售收入",
         *           "销售总额",
         *           "销售情况"
         *         ],
         *         "研发详情": [
         *           "研发详细情况",
         *           "研发的单据情况",
         *           "研发明细",
         *           "研发单据",
         *           "研发进展"
         *         ],
         *         "研发质量": [
         *           "产品缺陷",
         *           "产品质量",
         *           "质量问题",
         *           "产品问题",
         *           "质量报告"
         *         ],
         *         "研发进度": [
         *           "产研进度",
         *           "工作完成进度",
         *           "单据完成进度",
         *           "研发进展",
         *           "工作进度"
         *         ],
         *         "经营数据查询": [
         *           "经营数据查询",
         *           "经营分析",
         *           "公司经营状况",
         *           "经营报告"
         *         ],
         *         "财务报销": [
         *           "财务报销",
         *           "报销流程",
         *           "报销单",
         *           "财务审批",
         *           "报销申请"
         *         ],
         *         "跟进记录录入": [
         *           "跟进记录",
         *           "跟进情况",
         *           "客户跟进",
         *           "记录跟进",
         *           "跟进内容"
         *         ],
         *         "项目情况": [
         *           "项目情况",
         *           "项目进度",
         *           "项目跟进",
         *           "项目状态",
         *           "项目详情"
         *         ]
         *       },
         *       "cutoff": 0.85,
         *       "emb_model": "text-embedding-v2",
         *       "query": "今天几号？",
         *       "rerank_model": "BAAI/bge-reranker-v2-m3"
         *     }
         */
        ClassifyRequest: {
            /** Query */
            query: string;
            /** Class Terms */
            class_terms: {
                [key: string]: string[];
            };
            /**
             * Class Default
             * @description default or last history to fallback.
             */
            class_default?: string | null;
            /**
             * Emb Model
             * @default text-embedding-v2
             */
            emb_model: string | null;
            /**
             * Rerank Model
             * @default BAAI/bge-reranker-v2-m3
             */
            rerank_model: string | null;
            /**
             * Cutoff
             * @default 0.85
             */
            cutoff: number;
        };
        /**
         * CompletionParams
         * @example {
         *       "agent": "0",
         *       "extract": "code.python",
         *       "keywords": [
         *         "AI智能"
         *       ],
         *       "max_tokens": 4000,
         *       "model_id": 0,
         *       "model_name": "silicon",
         *       "prompt": "你是一个知识广博且乐于助人的助手，擅长分析和解决各种问题。请根据我提供的信息进行帮助。",
         *       "question": [
         *         "请解释人工智能的原理。",
         *         "AI是什么啊,可以描述一下吗?"
         *       ],
         *       "stream": false,
         *       "temperature": 0.7,
         *       "tools": [],
         *       "top_p": 0.8
         *     }
         * @example {
         *       "agent": "42",
         *       "extract": "wechat",
         *       "keywords": [
         *         [
         *           "web_search",
         *           "大象"
         *         ]
         *       ],
         *       "max_tokens": 4096,
         *       "model_id": -1,
         *       "model_name": "doubao",
         *       "prompt": "这是什么啊,可以描述一下吗?。",
         *       "question": "",
         *       "stream": false,
         *       "suffix": "这是",
         *       "temperature": 0.7,
         *       "tools": [],
         *       "top_p": 0.8
         *     }
         */
        CompletionParams: {
            /**
             * Stream
             * @description Whether to stream the response
             * @default false
             */
            stream: boolean;
            /**
             * Temperature
             * @description Temperature for response generation
             * @default 0.8
             */
            temperature: number;
            /**
             * Top P
             * @description The probability threshold setting for the model.
             * @default 0.8
             */
            top_p: number;
            /**
             * Max Tokens
             * @description Maximum number of tokens the model can generate.
             * @default 1024
             */
            max_tokens: number | null;
            /**
             * Prompt
             * @description The initial system content or prompt used to guide the AI's response.
             */
            prompt?: string | null;
            /**
             * Question
             * @description The primary question or prompt for the AI to respond to.
             */
            question?: string | string[] | null;
            /**
             * Agent
             * @description System content identifier. This index represents different scenarios or contexts for AI responses, allowing the selection of different system content.
             */
            agent?: string | null;
            /**
             * Suffix
             * @description The suffix for the AI to respond to completion.
             */
            suffix?: string | null;
            /**
             * Extract
             * @description Response Format,The type of content to extract from response(e.g., code.python,code.bash,code.cpp,code.sql,json,header,links)
             */
            extract?: string | string[] | null;
            /** @description Callback info: a URL string or a dict with url and optional payload,params,headers */
            callback?: components["schemas"]["CallbackUrl"] | null;
            /**
             * Model Name
             * @description Specify the name of the model to be used. It can be any available model, such as 'moonshot', 'glm', 'qwen', 'ernie', 'hunyuan', 'doubao','spark','baichuan','deepseek', or other models.
             * @default moonshot
             */
            model_name: string;
            /**
             * Model Id
             * @description Model ID to be used
             * @default 0
             */
            model_id: number;
            /**
             * Keywords
             * @description A list of keywords or tuples of (keyword, function, *args,*kwargs) used to search for relevant information across various sources, A list of tools represented as tuples, where each tuple consists of a callable and its corresponding arguments. such as online searches, database queries, or vector-based search systems. These keywords help guide the retrieval of data based on the specific terms provided.
             */
            keywords?: (string | [
                string,
                unknown
            ] | [
                string,
                unknown[]
            ] | [
                string,
                Record<string, never>
            ] | [
                string,
                unknown[],
                Record<string, never>
            ])[] | null;
            /**
             * Tools
             * @description This allows the AI to call specific functions with the provided arguments to perform tasks such as data processing, API calls, or other utility operations. Each tool can be invoked to enhance the AI's capabilities and provide more dynamic responses based on the context.
             */
            tools?: Record<string, never>[] | null;
            /** Images */
            images?: string[] | null;
        };
        /**
         * EmbeddingRequest
         * @example {
         *       "model_name": "qwen:text-embedding-v2",
         *       "normalize": false,
         *       "texts": [
         *         "role",
         *         "user",
         *         "content",
         *         "你好,有问题要问你"
         *       ]
         *     }
         */
        EmbeddingRequest: {
            /** Texts */
            texts: string[];
            /**
             * Model Name
             * @default qwen:text-embedding-v2
             */
            model_name: string;
            /**
             * Model Id
             * @default 0
             */
            model_id: number;
            /**
             * Normalize
             * @default false
             */
            normalize: boolean;
        };
        /** FuzzyMatchRequest */
        FuzzyMatchRequest: {
            /** Texts */
            texts: string[];
            /** Terms */
            terms: string[];
            /**
             * Top N
             * @default 3
             */
            top_n: number;
            /**
             * Cutoff
             * @default 0.6
             */
            cutoff: number;
            /**
             * Method
             * @default levenshtein
             * @enum {string}
             */
            method: "levenshtein" | "bm25" | "reranker" | "embeddings";
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** MetadataRequest */
        MetadataRequest: {
            /**
             * Function Code
             * @description 函数源码
             */
            function_code: string;
            /**
             * User
             * @description 用户ID
             * @default test
             */
            user: string;
            /**
             * Metadata
             * @description 预设元数据结构
             */
            metadata?: Record<string, never> | null;
            /**
             * Model Name
             * @description 使用的大模型名称
             * @default qwen:qwen-coder-plus
             */
            model_name: string | null;
            /**
             * Description
             * @description 函数功能描述
             */
            description?: string | null;
            /** @description 外部函数调用信息 */
            callback?: components["schemas"]["CallbackUrl"] | null;
            /**
             * Code Type
             * @description 代码类型
             * @default Python
             */
            code_type: string | null;
            /**
             * Cache Sec
             * @description 缓存秒数，0 表示使用默认
             * @default 0
             */
            cache_sec: number | null;
        };
        /**
         * OpenAIEmbeddingRequest
         * @example {
         *       "dimensions": 1024,
         *       "encoding_format": "float",
         *       "input": [
         *         "role",
         *         "user",
         *         "content",
         *         "你好,有问题要问你",
         *         "第二条文本\n带换行"
         *       ],
         *       "model": "qwen:text-embedding-v3"
         *     }
         */
        OpenAIEmbeddingRequest: {
            /** Model */
            model: string;
            /** Input */
            input: string | string[];
            /**
             * Encoding Format
             * @default float
             */
            encoding_format: string;
            /** Dimensions */
            dimensions?: number | null;
            /** User */
            user?: string | null;
        };
        /**
         * OpenAIRequest
         * @example {
         *       "max_tokens": 512,
         *       "model": "silicon:Qwen/Qwen2.5-Coder-7B-Instruct",
         *       "prompt": "User:你好,有问题要问你; Assistant:好的; User:请问1到100的和怎么计算?",
         *       "stream": false,
         *       "suffix": "Assistant:",
         *       "temperature": 1,
         *       "top_p": 1,
         *       "user": "test:test"
         *     }
         */
        OpenAIRequest: {
            /** Model */
            model: string;
            /** Prompt */
            prompt?: string | string[] | null;
            /** Suffix */
            suffix?: string | null;
            /**
             * Temperature
             * @default 1
             */
            temperature: number | null;
            /**
             * Top P
             * @default 1
             */
            top_p: number | null;
            /**
             * Max Tokens
             * @default 512
             */
            max_tokens: number | null;
            /**
             * Stream
             * @default false
             */
            stream: boolean | null;
            /**
             * Store
             * @default false
             */
            store: boolean | null;
            /** Tools */
            tools?: Record<string, never>[] | null;
            /** Stop */
            stop?: string | string[] | null;
            /**
             * Presence Penalty
             * @default 0
             */
            presence_penalty: number | null;
            /**
             * Frequency Penalty
             * @default 0
             */
            frequency_penalty: number | null;
            /** Logit Bias */
            logit_bias?: {
                [key: string]: number;
            } | null;
            /** Logprobs */
            logprobs?: number | null;
            /** User */
            user?: string | null;
            /** Prediction */
            prediction?: Record<string, never> | null;
            /** Stream Options */
            stream_options?: Record<string, never> | null;
            /** Extra Body */
            extra_body?: Record<string, never> | null;
            /** Extra Query */
            extra_query?: Record<string, never> | null;
        };
        /**
         * OpenAIRequestMessage
         * @example {
         *       "extra_body": {
         *         "enable_thinking": false
         *       },
         *       "max_tokens": 1024,
         *       "messages": [
         *         {
         *           "content": "你是一个知识广博且乐于助人的助手，擅长分析和解决各种问题。请根据我提供的信息进行帮助。",
         *           "role": "system"
         *         },
         *         {
         *           "content": "你好,有问题要问你",
         *           "name": "test",
         *           "role": "user"
         *         }
         *       ],
         *       "model": "qwen-turbo",
         *       "stream": false,
         *       "temperature": 1,
         *       "tools": [
         *         {
         *           "baidu_search": {
         *             "query": "大象像什么"
         *           },
         *           "type": "baidu_search"
         *         }
         *       ],
         *       "top_p": 1,
         *       "user": "test:test"
         *     }
         */
        OpenAIRequestMessage: {
            /** Model */
            model: string;
            /** Messages */
            messages: components["schemas"]["ChatMessage"][];
            /**
             * Temperature
             * @default 1
             */
            temperature: number | null;
            /**
             * Top P
             * @default 1
             */
            top_p: number | null;
            /**
             * Max Tokens
             * @default 512
             */
            max_tokens: number | null;
            /**
             * Stream
             * @default false
             */
            stream: boolean | null;
            /**
             * Store
             * @default false
             */
            store: boolean | null;
            /** Tools */
            tools?: Record<string, never>[] | null;
            /** Stop */
            stop?: string | string[] | null;
            /**
             * Presence Penalty
             * @default 0
             */
            presence_penalty: number | null;
            /**
             * Frequency Penalty
             * @default 0
             */
            frequency_penalty: number | null;
            /** Logit Bias */
            logit_bias?: {
                [key: string]: number;
            } | null;
            /** User */
            user?: string | null;
            /** Reasoning Effort */
            reasoning_effort?: string | null;
            /** Response Format */
            response_format?: Record<string, never> | null;
            /** Prediction */
            prediction?: Record<string, never> | null;
            /** Stream Options */
            stream_options?: Record<string, never> | null;
            /** Extra Body */
            extra_body?: Record<string, never> | null;
            /** Extra Query */
            extra_query?: Record<string, never> | null;
            /** Metadata */
            metadata?: {
                [key: string]: string;
            } | null;
        };
        /** OpenAIResponse */
        OpenAIResponse: {
            /** Id */
            id: string;
            /** Object */
            object: string;
            /** Created */
            created: number;
            /** Model */
            model: string;
            /** Choices */
            choices: Record<string, never>[];
            /** Usage */
            usage: Record<string, never>;
            /** Service Tier */
            service_tier?: string | null;
            /** System Fingerprint */
            system_fingerprint?: string | null;
        };
        /**
         * PlatformEnum
         * @enum {string}
         */
        PlatformEnum: "baidu" | "ali" | "dashscope";
        /**
         * PromptRequest
         * @example {
         *       "depth": [
         *         "73",
         *         "71",
         *         "72",
         *         "74"
         *       ],
         *       "model": "deepseek:deepseek-reasoner"
         *     }
         */
        PromptRequest: {
            /** Query */
            query?: string | null;
            /**
             * Model
             * @default deepseek:deepseek-reasoner
             */
            model: string | null;
            /** Depth */
            depth?: string[];
        };
        /**
         * Registration
         * @example {
         *       "code": "123456",
         *       "eth_address": "0x123456789ABCDEF",
         *       "group": "0",
         *       "original_message": "original_message_here",
         *       "password": "secure_password",
         *       "public_key": "0x123456789ABCDEF",
         *       "role": "user",
         *       "signed_message": "signed_message_here",
         *       "username": "test"
         *     }
         */
        Registration: {
            /** Eth Address */
            eth_address?: string | null;
            /** Signed Message */
            signed_message?: string | null;
            /** Original Message */
            original_message?: string | null;
            /** Username */
            username?: string | null;
            /** Password */
            password?: string | null;
            /** Public Key */
            public_key?: string | null;
            /** Code */
            code?: string | null;
            /**
             * Role
             * @default user
             */
            role: string | null;
            /**
             * Group
             * @default 0
             */
            group: string | null;
        };
        /** SampleResult */
        SampleResult: {
            /** Id */
            id: number;
            /** Action */
            action: string;
            /** 一级类 */
            "\u4E00\u7EA7\u7C7B": string;
            /** 二级类 */
            "\u4E8C\u7EA7\u7C7B": string;
            /** 三级类 */
            "\u4E09\u7EA7\u7C7B": string;
            /** Template */
            template: string;
            /** Status */
            status: boolean;
        };
        /** StructureSampleRequest */
        StructureSampleRequest: {
            /**
             * Yd Type
             * @description 业务类型，例如 '开户'、'销户' 等
             * @default 开户
             */
            yd_type: string;
            /**
             * Model
             * @description 使用的模型名称
             * @default qwen:qwen3-32b
             */
            model: string | null;
            /**
             * Limit
             * @description 返回的样本数量上限
             * @default 100
             */
            limit: number | null;
        };
        /**
         * SubmitMessagesRequest
         * @example {
         *       "filter_limit": -500,
         *       "filter_time": 0,
         *       "messages": [
         *         {
         *           "content": "你好，我的朋友",
         *           "name": "test",
         *           "role": "user"
         *         }
         *       ],
         *       "params": [
         *         {
         *           "agent": "0",
         *           "callback": {
         *             "url": "http://127.0.0.1:7000/callback"
         *           },
         *           "extract": "json",
         *           "images": [],
         *           "keywords": [
         *             "中国2024新生儿人口"
         *           ],
         *           "max_tokens": 1024,
         *           "model_id": 0,
         *           "model_name": "moonshot",
         *           "prompt": "",
         *           "question": "中国今年多少新生儿",
         *           "stream": false,
         *           "temperature": 0.8,
         *           "tools": [],
         *           "top_p": 0.8
         *         },
         *         {
         *           "agent": "0",
         *           "callback": {
         *             "url": "http://127.0.0.1:7000/callback"
         *           },
         *           "extract": "wechat",
         *           "images": [],
         *           "keywords": [
         *             [
         *               "web_search",
         *               "感冒灵"
         *             ]
         *           ],
         *           "max_tokens": 1024,
         *           "model_id": 0,
         *           "model_name": "qwen",
         *           "prompt": "",
         *           "question": "感冒灵颗粒好用吗",
         *           "stream": false,
         *           "temperature": 0.8,
         *           "tools": [],
         *           "top_p": 0.8
         *         }
         *       ],
         *       "use_hist": false,
         *       "user": "aigc_test"
         *     }
         */
        SubmitMessagesRequest: {
            /** Request Id */
            request_id?: string | null;
            /** Name */
            name?: string | null;
            /** User */
            user?: string | null;
            /** Robot Id */
            robot_id?: string | null;
            /**
             * Use Hist
             * @description Use historical messages.
             * @default false
             */
            use_hist: boolean;
            /**
             * Filter Limit
             * @description The limit count(<0) or max len(>0) to filter historical messages.
             * @default -500
             */
            filter_limit: number | null;
            /**
             * Filter Time
             * @description The timestamp to filter historical messages.
             * @default 0
             */
            filter_time: number | null;
            /**
             * Messages
             * @description A list of message objects representing the current conversation. If no messages are provided and `use_hist` is set to `True`, the system will filter existing chat history using the fields `name`, `user`, and `filter_time`. If `messages` are provided, the last user message will be used as the question.
             */
            messages?: components["schemas"]["ChatMessage"][] | null;
            /** Params */
            params?: (components["schemas"]["CompletionParams"] | Record<string, never>)[] | null;
        };
        /** SummaryRequest */
        SummaryRequest: {
            /** Text */
            text?: string | string[] | null;
            /** Extract Prompt */
            extract_prompt?: string | null;
            /** Summary Prompt */
            summary_prompt?: string | null;
            /**
             * Extract Model
             * @default qwen:qwen-long
             */
            extract_model: string;
            /**
             * Summary Model
             * @default qwen:qwen-plus
             */
            summary_model: string;
            /**
             * Max Tokens
             * @default 4096
             */
            max_tokens: number;
            /**
             * Max Segment Length
             * @default 100000
             */
            max_segment_length: number;
        };
        /** Token */
        Token: {
            /** Access Token */
            access_token: string;
            /** Token Type */
            token_type: string;
        };
        /**
         * ToolRequest
         * @example {
         *       "messages": [
         *         {
         *           "content": "请根据用户的提问分析意图，请转换用户的问题，提取所需的关键参数，并自动选择最合适的工具进行处理。",
         *           "role": "system"
         *         },
         *         {
         *           "content": "请告诉我 2023-11-22 前面三周的日期范围。",
         *           "role": "user"
         *         }
         *       ],
         *       "model_id": -1,
         *       "model_metadata": "qwen:qwen-coder-plus",
         *       "model_name": "qwen:qwen-max",
         *       "prompt": "",
         *       "temperature": 0.01,
         *       "tools": [],
         *       "top_p": 0.95,
         *       "user": ""
         *     }
         */
        ToolRequest: {
            /** Messages */
            messages?: components["schemas"]["ChatMessage"][] | null;
            /** Tools */
            tools?: unknown[] | null;
            /** User */
            user?: string | null;
            /** Prompt */
            prompt?: string | null;
            /**
             * Model Name
             * @default qwen:qwen-max
             */
            model_name: string | null;
            /**
             * Model Metadata
             * @default qwen:qwen-coder-plus
             */
            model_metadata: string;
            /**
             * Model Id
             * @default -1
             */
            model_id: number;
            /**
             * Top P
             * @default 0.95
             */
            top_p: number;
            /**
             * Temperature
             * @default 0.01
             */
            temperature: number;
        };
        /** TranslateRequest */
        TranslateRequest: {
            /**
             * Text
             * @default 你好我的朋友。
             */
            text: string;
            /**
             * Source
             * @default auto
             */
            source: string;
            /**
             * Target
             * @default auto
             */
            target: string;
            /**
             * Platform
             * @default baidu
             */
            platform: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    knowledge_ideatech_knowledge__post: {
        parameters: {
            query: {
                text: string;
                rerank_model?: string | null;
                version?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_knowledge_ideatech_knowledge__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sample_batch_ideatech_sample_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StructureSampleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_templates_ideatech_templates_list_get: {
        parameters: {
            query?: {
                only_active?: boolean;
                yd_type?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    confirm_action_ideatech_confirm_post: {
        parameters: {
            query?: {
                yd_type?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SampleResult"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_table_table_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    show_table_form_table__table_name__get: {
        parameters: {
            query?: {
                edit_id?: string | null;
            };
            header?: never;
            path: {
                table_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_data_table_submit__table_name__post: {
        parameters: {
            query: {
                x: unknown;
            };
            header?: never;
            path: {
                table_name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_submit_data_table_submit__table_name__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    view_table_data_table_view__table_name__get: {
        parameters: {
            query?: {
                page?: number;
                per_page?: number;
            };
            header?: never;
            path: {
                table_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_data_table_delete__table_name___row_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                table_name: string;
                row_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_verification_code_send_wechat_code_get: {
        parameters: {
            query: {
                username: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_user_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Registration"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    authenticate_user_authenticate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    protected_protected_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    secure_route_secure_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    refresh_access_token_refresh_token_post: {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    system_status_status__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_logs_info_logs_get: {
        parameters: {
            query?: {
                lines?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_admin__get: {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_user__get: {
        parameters: {
            query?: {
                token?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    push_redis_data_data_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_redis_value_get__key__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_redis_key_delete__key__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    install_packages_import_pip_install_get: {
        parameters: {
            query: {
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    pip_list_pip_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    healthcheck_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_routes_route_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_mcp_tool_mcp_tool_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    retrieval_retrieval__text__get: {
        parameters: {
            query?: {
                platform?: ("duckduckgo" | "tavily" | "serper" | "brave" | "firecrawl" | "exa" | "zhipu" | "arxiv" | "wiki" | "patent" | "invest" | "google" | "bing" | "baidu" | "yahoo" | "auto") | null;
            };
            header?: never;
            path: {
                text: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    extract_extract__get: {
        parameters: {
            query: {
                text: string;
                extract?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    embeddings_embeddings_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmbeddingRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    fuzzy_matches_fuzzy_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FuzzyMatchRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    classify_text_classify_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClassifyRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_embeddings_collection_create_embeddings_collection__get: {
        parameters: {
            query: {
                collection_name: string;
                model_name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upsert_embeddings_points_upsert_embeddings_points_post: {
        parameters: {
            query: {
                collection_name: string;
                text_field?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_upsert_embeddings_points_upsert_embeddings_points_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_embeddings_points_search_embeddings_points_post: {
        parameters: {
            query: {
                collection_name: string;
                topn?: number;
                score_threshold?: number;
                payload_key?: string;
                field_key?: string;
                match_values?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string | string[] | [
                    string
                ];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    recommend_points_recommend_points_post: {
        parameters: {
            query: {
                collection_name: string;
                topn?: number;
                score_threshold?: number;
                payload_key?: string;
                field_key?: string;
                match_values?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": number[] | [
                    number
                ];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    nlp_nlp__get: {
        parameters: {
            query: {
                text: string;
                nlp_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_markdown_markdown__get: {
        parameters: {
            query?: {
                text?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_prompts_prompts_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_tools_tools_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToolRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_metadata_from_code_metadata_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MetadataRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    agent_run_agent__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assistant_run_assistant__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssistantRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    handle_callback_callback_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    generate_batch_text_llm_post: {
        parameters: {
            query?: {
                /** @description 非流式是否启用任务异步处理模式 */
                use_task?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompletionParams"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_message_message__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatCompletionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_embeddings_v1_embeddings_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OpenAIEmbeddingRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    completions_v1_completions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OpenAIRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    chat_completions_v1_chat_completions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OpenAIRequestMessage"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_models_v1_models_get: {
        parameters: {
            query?: {
                /** @description Retrieves a model instance, providing basic information about the model such as the owner and permissioning. e.g., moonshot,glm,qwen,doubao,spark,ernie,baichuan,lingyiwanwu,hunyuan,deepseek,minimax,mistral,jina,gemini,grok,claude,silicon,modelscope,aihubmix,tokenflux or custom models. */
                model?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    chat_page_chat_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    get_messages_get_messages__get: {
        parameters: {
            query?: {
                user?: string;
                name?: string;
                robot_id?: string;
                filter_time?: number;
                agent?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_messages_submit_messages_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmitMessagesRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    response_message_message__task_id__get: {
        parameters: {
            query?: {
                /** @description Enable streaming response if set to True. */
                stream?: boolean;
                /** @description Controls randomness. Lower values make output more focused and deterministic, while higher values increase creativity. */
                temperature?: number;
                /** @description Nucleus sampling parameter. Limits the response to the smallest set of tokens whose cumulative probability exceeds this value. */
                top_p?: number;
                /** @description The maximum number of tokens the model can generate in the response. */
                max_tokens?: number | null;
                /** @description The initial context or system message to guide the AI's behavior. */
                prompt?: string | null;
                /** @description The main question or user prompt for the AI to respond to. */
                question?: string | null;
                /** @description Contextual identifier for different use cases, enabling selection of appropriate system behavior. */
                agent?: string | null;
                /** @description Specify the model to use, e.g., moonshot,glm,qwen,doubao,spark,ernie,baichuan,lingyiwanwu,hunyuan,deepseek,minimax,mistral,jina,gemini,grok,claude,silicon,modelscope,aihubmix,tokenflux or custom models. */
                model_name?: string;
                /** @description An optional model ID for selecting different versions or configurations of a model. */
                model_id?: number;
                /** @description Specify the type of content to extract from the AI's response (e.g., key phrases, summaries). */
                extract?: string | null;
                /** @description A list of keywords used to guide the retrieval of relevant information or sources based on search terms. */
                keywords?: string[] | null;
            };
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_status_task__task_id__get: {
        parameters: {
            query?: {
                platform?: "json" | "file" | "html";
            };
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    execute_task_task_execute__post: {
        parameters: {
            query: {
                task_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_location_location__get: {
        parameters: {
            query: {
                query: string;
                /** @description Region or city to limit the search */
                region?: string;
                platform?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    translate_text_translate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TranslateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_file_upload_post: {
        parameters: {
            query?: {
                oss_expires?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_file_upload_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    file_handler_files__filename__get: {
        parameters: {
            query?: {
                url?: string;
                stream?: boolean;
            };
            header?: never;
            path: {
                filename: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_wechat_scheduler_send_wechat_scheduler_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_send_wechat_scheduler_send_wechat_scheduler_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_page__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    extract_conversations_conversations_extract_post: {
        parameters: {
            query?: {
                convo_type?: "gpt" | "deepseek";
                stream?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_extract_conversations_conversations_extract_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    filter_conversations_conversations_filter_post: {
        parameters: {
            query?: {
                after_date?: string;
                stream?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_filter_conversations_conversations_filter_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    summary_extract_text_summary_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_summary_extract_text_summary_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    image_recognition_ocr_post: {
        parameters: {
            query?: {
                ocr_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_image_recognition_ocr_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_image_visual_post: {
        parameters: {
            query?: {
                style_name?: string;
                model_id?: number;
                return_url?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_generate_image_visual_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    speech_to_text_asr_post: {
        parameters: {
            query?: {
                platform?: components["schemas"]["PlatformEnum"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_speech_to_text_asr_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    text_to_audio_tts_post: {
        parameters: {
            query: {
                sentences: string;
                platform?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    text_to_image_tti_post: {
        parameters: {
            query: {
                prompt: string;
                negative_prompt?: string;
                style_name?: string;
                model_name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    image_understanding_iu_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_image_understanding_iu_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    files_process_fp_post: {
        parameters: {
            query?: {
                question?: string;
                model_name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_files_process_fp_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ppt_create_ppt_get: {
        parameters: {
            query: {
                /** @description 用于生成PPT的文本内容 */
                text: string;
                templateid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
