/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register User */
        post: operations["register_user_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate User
         * @description 登录路由，颁发访问令牌和刷新令牌,令牌生成 login_for_access_token,
         *     如果 eth_address 或 public_key 认证成功，通过公钥验证签名则不需要密码。
         *     使用 username 或 uuid 和密码登录。
         */
        post: operations["authenticate_user_authenticate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protected": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Protected */
        post: operations["protected_protected_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/secure": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Secure Route */
        post: operations["secure_route_secure_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/refresh_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh Access Token */
        post: operations["refresh_access_token_refresh_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin */
        get: operations["admin_admin__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** User */
        get: operations["user_user__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/web_search/{text}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Web Search */
        get: operations["web_search_web_search__text__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/retrieval/{text}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieval */
        get: operations["retrieval_retrieval__text__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/embeddings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Embeddings */
        post: operations["embeddings_embeddings_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fuzzy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fuzzy Matches */
        post: operations["fuzzy_matches_fuzzy_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/classify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Classify Text */
        post: operations["classify_text_classify_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/knowledge/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Knowledge
         * @description search_knowledge_base
         */
        post: operations["knowledge_knowledge__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nlp/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Nlp */
        get: operations["nlp_nlp__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Text Tools */
        post: operations["text_tools_tools_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assistant/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assistant Run */
        post: operations["assistant_run_assistant__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/llm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate Text */
        post: operations["generate_text_llm_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/message/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate Message */
        post: operations["generate_message_message__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Chat Completions
         * @description 兼容 OpenAI API 的 /v1/chat/completions 路径，返回类似 OpenAI API 的格式
         */
        post: operations["chat_completions_v1_chat_completions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Models */
        get: operations["get_models_v1_models_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get_messages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Messages */
        get: operations["get_messages_get_messages__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submit_messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit Messages */
        post: operations["submit_messages_submit_messages_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/message/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Response Message */
        get: operations["response_message_message__task_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Task Status */
        get: operations["get_task_status_task__task_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/execute_task/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute Task */
        post: operations["execute_task_execute_task__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/location/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Location */
        get: operations["search_location_location__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/translate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Translate Text */
        post: operations["translate_text_translate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload File */
        post: operations["upload_file_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{filename}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** File Handler */
        get: operations["file_handler_files__filename__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/send_wechat_scheduler": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Wechat Scheduler */
        post: operations["send_wechat_scheduler_send_wechat_scheduler_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Send Page */
        get: operations["send_page__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Image Recognition */
        post: operations["image_recognition_ocr_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/visual": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate Image */
        post: operations["generate_image_visual_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/asr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Speech To Text */
        post: operations["speech_to_text_asr_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Text To Audio */
        post: operations["text_to_audio_tts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tti": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Text To Image */
        post: operations["text_to_image_tti_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/iu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Image Understanding */
        post: operations["image_understanding_iu_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Files Process
         * @description 接收文件并调用 AI 模型处理,基于文件内容生成消息。
         *
         *     :param files: 上传的文件列表
         *     :param model_name: 模型名称
         *     :param model_id: 模型 ID
         *     :return: AI 处理结果
         */
        post: operations["files_process_fp_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ppt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Ppt Create */
        get: operations["ppt_create_ppt_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AssistantRequest */
        AssistantRequest: {
            /** Question */
            question: string;
            /**
             * Prompt
             * @default You are a personal math tutor. Write and run code to answer math questions.
             */
            prompt: string;
            /**
             * User Name
             * @default test
             */
            user_name: string;
            /** @default code_interpreter */
            tools_type: components["schemas"]["AssistantToolsEnum"];
            /**
             * Model Id
             * @default 4
             */
            model_id: number;
        };
        /**
         * AssistantToolsEnum
         * @enum {string}
         */
        AssistantToolsEnum: "code_interpreter" | "web_search" | "function_calling";
        /**
         * AuthRequest
         * @example {
         *       "eth_address": "0x123456789ABCDEF",
         *       "password": "123456",
         *       "public_key": "0x123456789ABCDEF",
         *       "username": "test"
         *     }
         */
        AuthRequest: {
            /** Eth Address */
            eth_address?: string | null;
            /** Signed Message */
            signed_message?: string | null;
            /** Original Message */
            original_message?: string | null;
            /** Username */
            username?: string | null;
            /** Password */
            password?: string | null;
            /** Public Key */
            public_key?: string | null;
        };
        /** Body_files_process_fp_post */
        Body_files_process_fp_post: {
            /** Files */
            files: string[];
        };
        /** Body_generate_image_visual_post */
        Body_generate_image_visual_post: {
            /**
             * File
             * Format: binary
             */
            file?: string;
            /** Image Urls */
            image_urls?: string[];
            /** Prompt */
            prompt?: string;
        };
        /** Body_image_recognition_ocr_post */
        Body_image_recognition_ocr_post: {
            /**
             * File
             * Format: binary
             */
            file?: string;
            /** Image Url */
            image_url?: string;
        };
        /** Body_image_understanding_iu_post */
        Body_image_understanding_iu_post: {
            request?: components["schemas"]["CompletionParams"] | null;
            /** Files */
            files: string[];
        };
        /** Body_knowledge_knowledge__post */
        Body_knowledge_knowledge__post: {
            /**
             * File
             * Format: binary
             */
            file?: string;
        };
        /** Body_send_wechat_scheduler_send_wechat_scheduler_post */
        Body_send_wechat_scheduler_send_wechat_scheduler_post: {
            /**
             * File
             * Format: binary
             */
            file?: string;
        };
        /** Body_speech_to_text_asr_post */
        Body_speech_to_text_asr_post: {
            /**
             * File
             * Format: binary
             */
            file?: string;
            /** File Urls */
            file_urls?: string[];
        };
        /** Body_upload_file_upload_post */
        Body_upload_file_upload_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /**
         * ChatCompletionRequest
         * @example {
         *       "agent": "0",
         *       "extract": "json",
         *       "filter_limit": -500,
         *       "filter_time": 0,
         *       "keywords": [],
         *       "max_tokens": 1024,
         *       "messages": [],
         *       "model_id": 0,
         *       "model_name": "moonshot",
         *       "prompt": "",
         *       "question": "什么是区块链金融?",
         *       "stream": false,
         *       "temperature": 0.4,
         *       "tools": [],
         *       "top_p": 0.8,
         *       "use_hist": false,
         *       "username": "test"
         *     }
         */
        ChatCompletionRequest: {
            /**
             * Stream
             * @description Whether to stream the response
             * @default false
             */
            stream: boolean;
            /**
             * Temperature
             * @description Temperature for response generation
             * @default 0.8
             */
            temperature: number;
            /**
             * Top P
             * @description The probability threshold setting for the model.
             * @default 0.8
             */
            top_p: number;
            /**
             * Max Tokens
             * @description Maximum number of tokens the model can generate.
             * @default 1024
             */
            max_tokens: number | null;
            /**
             * Prompt
             * @description The initial system content or prompt used to guide the AI's response.
             */
            prompt?: string | null;
            /**
             * Question
             * @description The primary question or prompt for the AI to respond to. If `messages` are provided, this field will be automatically overridden by the last user message content in `messages`. Otherwise, this `question` field will be used directly as the prompt for the AI.
             */
            question?: string | null;
            /**
             * Agent
             * @description System content identifier. This index represents different scenarios or contexts for AI responses, allowing the selection of different system content.
             */
            agent?: string | null;
            /**
             * Suffix
             * @description The suffix for the AI to respond to completion.
             */
            suffix?: string | null;
            /**
             * Extract
             * @description Response Format,The type of content to extract from response(e.g., code.python,code.bash,code.cpp,code.sql,json,header,links)
             */
            extract?: string | null;
            /**
             * Model Name
             * @description Specify the name of the model to be used. It can be any available model, such as 'moonshot', 'glm', 'qwen', 'ernie', 'hunyuan', 'doubao','spark','baichuan','deepseek', or other models.
             * @default moonshot
             */
            model_name: string;
            /**
             * Model Id
             * @description Model ID to be used
             * @default 0
             */
            model_id: number;
            /**
             * Keywords
             * @description A list of keywords or tuples of (keyword, function, *args) used to search for relevant information across various sources, such as online searches, database queries, or vector-based search systems. These keywords help guide the retrieval of data based on the specific terms provided.
             */
            keywords?: (string | [
                string,
                unknown
            ])[] | null;
            /**
             * Tools
             * @description A list of tools represented as tuples, where each tuple consists of a callable and its corresponding arguments. This allows the AI to call specific functions with the provided arguments to perform tasks such as data processing, API calls, or other utility operations. Each tool can be invoked to enhance the AI's capabilities and provide more dynamic responses based on the context.
             */
            tools?: [
                string,
                unknown
            ][] | null;
            /** Uuid */
            uuid?: string | null;
            /** Username */
            username?: string | null;
            /** Robot Id */
            robot_id?: string | null;
            /** User Id */
            user_id?: string | null;
            /**
             * Use Hist
             * @description use historical messages.
             * @default false
             */
            use_hist: boolean;
            /**
             * Filter Limit
             * @description The limit count(<0) or max len(>0) to filter historical messages.
             * @default -500
             */
            filter_limit: number | null;
            /**
             * Filter Time
             * @description The timestamp to filter historical messages.
             * @default 0
             */
            filter_time: number;
            /**
             * Messages
             * @description A list of message objects representing the current conversation. If no messages are provided and `use_hist` is set to `True`, the system will filter existing chat history using the fields `username`, `user_id`, and `filter_time`. If `messages` are provided, the last user message will be used as the question.
             */
            messages?: components["schemas"]["ChatMessage"][] | null;
        };
        /** ChatMessage */
        ChatMessage: {
            /**
             * Role
             * @enum {string}
             */
            role: "system" | "user" | "assistant" | "developer";
            /** Content */
            content: string | Record<string, never>[];
            /** Name */
            name?: string | null;
        };
        /**
         * ClassifyRequest
         * @example {
         *       "class_default": "聊天",
         *       "class_terms": {
         *         "商机录入": [
         *           "商机录入",
         *           "商机信息",
         *           "录入商机",
         *           "商机跟进",
         *           "商机记录"
         *         ],
         *         "新增客户信息": [
         *           "新增客户",
         *           "添加客户",
         *           "客户信息",
         *           "客户录入",
         *           "客户添加"
         *         ],
         *         "未验收的项目数": [
         *           "待验收的项目数",
         *           "尚未验收的项目数",
         *           "未完成验收的项目数",
         *           "未交付的项目数",
         *           "验收未完成的项目数"
         *         ],
         *         "本季度计划验收的项目数": [
         *           "本季度预定验收的项目数量",
         *           "本季度预计完成验收的项目数",
         *           "本季度计划验收的项目数",
         *           "本季度安排验收的项目数",
         *           "本季度计划交付的项目数量"
         *         ],
         *         "查询回款额": [
         *           "回款额查询",
         *           "查询回款额",
         *           "回款情况",
         *           "回款金额",
         *           "回款记录"
         *         ],
         *         "查询销售额": [
         *           "销售额查询",
         *           "查询销售额",
         *           "销售收入",
         *           "销售总额",
         *           "销售情况"
         *         ],
         *         "研发详情": [
         *           "研发详细情况",
         *           "研发的单据情况",
         *           "研发明细",
         *           "研发单据",
         *           "研发进展"
         *         ],
         *         "研发质量": [
         *           "产品缺陷",
         *           "产品质量",
         *           "质量问题",
         *           "产品问题",
         *           "质量报告"
         *         ],
         *         "研发进度": [
         *           "产研进度",
         *           "工作完成进度",
         *           "单据完成进度",
         *           "研发进展",
         *           "工作进度"
         *         ],
         *         "经营数据查询": [
         *           "经营数据查询",
         *           "经营分析",
         *           "公司经营状况",
         *           "经营报告"
         *         ],
         *         "财务报销": [
         *           "财务报销",
         *           "报销流程",
         *           "报销单",
         *           "财务审批",
         *           "报销申请"
         *         ],
         *         "跟进记录录入": [
         *           "跟进记录",
         *           "跟进情况",
         *           "客户跟进",
         *           "记录跟进",
         *           "跟进内容"
         *         ],
         *         "项目情况": [
         *           "项目情况",
         *           "项目进度",
         *           "项目跟进",
         *           "项目状态",
         *           "项目详情"
         *         ]
         *       },
         *       "emb_model": "text-embedding-v2",
         *       "llm_model": "moonshot",
         *       "prompt": "你是群聊中的智能助手。任务是根据给定内容，识别并分类用户的意图，并返回相应的 JSON 格式，例如：{\"intent\":\"xx\"}对于意图分类之外的任何内容，请归类为 \"聊天\",如果用户输入的内容不属于意图类别，直接返回 `{\"intent\": \"聊天\"}`，即表示这条内容不涉及明确的工作任务或查询。以下是常见的意图类别与对应可能的关键词或者类似的意思，请帮我判断用户意图:",
         *       "query": "今天几号？",
         *       "rerank_model": "BAAI/bge-reranker-v2-m3"
         *     }
         */
        ClassifyRequest: {
            /** Query */
            query: string;
            /** Class Terms */
            class_terms: {
                [key: string]: string[];
            };
            /**
             * Class Default
             * @description default or last history to fallback.
             */
            class_default?: string | null;
            /**
             * Emb Model
             * @default text-embedding-v2
             */
            emb_model: string | null;
            /**
             * Rerank Model
             * @default BAAI/bge-reranker-v2-m3
             */
            rerank_model: string | null;
            /**
             * Llm Model
             * @default moonshot
             */
            llm_model: string | null;
            /** Prompt */
            prompt?: string | null;
        };
        /** CompletionParams */
        CompletionParams: {
            /**
             * Stream
             * @description Whether to stream the response
             * @default false
             */
            stream: boolean;
            /**
             * Temperature
             * @description Temperature for response generation
             * @default 0.8
             */
            temperature: number;
            /**
             * Top P
             * @description The probability threshold setting for the model.
             * @default 0.8
             */
            top_p: number;
            /**
             * Max Tokens
             * @description Maximum number of tokens the model can generate.
             * @default 1024
             */
            max_tokens: number | null;
            /**
             * Prompt
             * @description The initial system content or prompt used to guide the AI's response.
             */
            prompt?: string | null;
            /**
             * Question
             * @description The primary question or prompt for the AI to respond to.
             */
            question?: string | null;
            /**
             * Agent
             * @description System content identifier. This index represents different scenarios or contexts for AI responses, allowing the selection of different system content.
             */
            agent?: string | null;
            /**
             * Suffix
             * @description The suffix for the AI to respond to completion.
             */
            suffix?: string | null;
            /**
             * Extract
             * @description Response Format,The type of content to extract from response(e.g., code.python,code.bash,code.cpp,code.sql,json,header,links)
             */
            extract?: string | null;
            /**
             * Model Name
             * @description Specify the name of the model to be used. It can be any available model, such as 'moonshot', 'glm', 'qwen', 'ernie', 'hunyuan', 'doubao','spark','baichuan','deepseek', or other models.
             * @default moonshot
             */
            model_name: string;
            /**
             * Model Id
             * @description Model ID to be used
             * @default 0
             */
            model_id: number;
            /**
             * Keywords
             * @description A list of keywords or tuples of (keyword, function, *args) used to search for relevant information across various sources, such as online searches, database queries, or vector-based search systems. These keywords help guide the retrieval of data based on the specific terms provided.
             */
            keywords?: (string | [
                string,
                unknown
            ])[] | null;
            /**
             * Tools
             * @description A list of tools represented as tuples, where each tuple consists of a callable and its corresponding arguments. This allows the AI to call specific functions with the provided arguments to perform tasks such as data processing, API calls, or other utility operations. Each tool can be invoked to enhance the AI's capabilities and provide more dynamic responses based on the context.
             */
            tools?: [
                string,
                unknown
            ][] | null;
        };
        /** EmbeddingRequest */
        EmbeddingRequest: {
            /** Texts */
            texts: string[];
            /**
             * Model Name
             * @default qwen
             */
            model_name: string;
            /**
             * Model Id
             * @default 0
             */
            model_id: number;
        };
        /** FuzzyMatchRequest */
        FuzzyMatchRequest: {
            /** Texts */
            texts: string[];
            /** Terms */
            terms: string[];
            /**
             * Top N
             * @default 3
             */
            top_n: number;
            /**
             * Cutoff
             * @default 0.6
             */
            cutoff: number;
            /**
             * Method
             * @default levenshtein
             */
            method: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * OpenAIRequest
         * @example {
         *       "max_tokens": 512,
         *       "messages": [
         *         {
         *           "content": "你好,有问题要问你",
         *           "role": "user"
         *         }
         *       ],
         *       "model": "qwen-turbo",
         *       "stream": true,
         *       "temperature": 1,
         *       "top_p": 1
         *     }
         */
        OpenAIRequest: {
            /** Model */
            model: string;
            /** Messages */
            messages: components["schemas"]["ChatMessage"][];
            /**
             * Temperature
             * @default 1
             */
            temperature: number | null;
            /**
             * Top P
             * @default 1
             */
            top_p: number | null;
            /**
             * Max Tokens
             * @default 512
             */
            max_tokens: number | null;
            /**
             * Stream
             * @default true
             */
            stream: boolean | null;
            /**
             * Store
             * @default false
             */
            store: boolean | null;
            /** Tools */
            tools?: Record<string, never>[] | null;
            /** Stop */
            stop?: string | string[] | null;
            /**
             * Presence Penalty
             * @default 0
             */
            presence_penalty: number | null;
            /**
             * Frequency Penalty
             * @default 0
             */
            frequency_penalty: number | null;
            /** Logit Bias */
            logit_bias?: {
                [key: string]: number;
            } | null;
            /** User */
            user?: string | null;
            /** Reasoning Effort */
            reasoning_effort?: string | null;
            /** Response Format */
            response_format?: Record<string, never> | null;
            /** Prediction */
            prediction?: Record<string, never> | null;
            /** Stream Options */
            stream_options?: Record<string, never> | null;
        };
        /** OpenAIResponse */
        OpenAIResponse: {
            /** Id */
            id: string;
            /** Object */
            object: string;
            /** Created */
            created: number;
            /** Model */
            model: string;
            /** Choices */
            choices: Record<string, never>[];
            /** Usage */
            usage: Record<string, never>;
            /** Service Tier */
            service_tier?: string | null;
            /** System Fingerprint */
            system_fingerprint?: string | null;
        };
        /**
         * PlatformEnum
         * @enum {string}
         */
        PlatformEnum: "baidu" | "ali" | "dashscope";
        /**
         * Registration
         * @example {
         *       "eth_address": "0x123456789ABCDEF",
         *       "group": "0",
         *       "original_message": "original_message_here",
         *       "password": "secure_password",
         *       "public_key": "0x123456789ABCDEF",
         *       "role": "user",
         *       "signed_message": "signed_message_here",
         *       "username": "test"
         *     }
         */
        Registration: {
            /** Eth Address */
            eth_address?: string | null;
            /** Signed Message */
            signed_message?: string | null;
            /** Original Message */
            original_message?: string | null;
            /** Username */
            username?: string | null;
            /** Password */
            password?: string | null;
            /** Public Key */
            public_key?: string | null;
            /**
             * Role
             * @default user
             */
            role: string | null;
            /**
             * Group
             * @default 0
             */
            group: string | null;
        };
        /**
         * SubmitMessagesRequest
         * @example {
         *       "filter_limit": -500,
         *       "filter_time": 0,
         *       "messages": [
         *         {
         *           "content": "你好，我的朋友",
         *           "role": "user"
         *         }
         *       ],
         *       "params": [
         *         {
         *           "agent": "0",
         *           "extract": "json",
         *           "keywords": [],
         *           "max_tokens": 1024,
         *           "model_id": 0,
         *           "model_name": "moonshot",
         *           "prompt": "",
         *           "question": "",
         *           "stream": false,
         *           "temperature": 0.8,
         *           "tools": [],
         *           "top_p": 0.8
         *         }
         *       ],
         *       "use_hist": false,
         *       "username": "test"
         *     }
         */
        SubmitMessagesRequest: {
            /** Uuid */
            uuid?: string | null;
            /** Username */
            username?: string | null;
            /** Robot Id */
            robot_id?: string | null;
            /** User Id */
            user_id?: string | null;
            /**
             * Use Hist
             * @description Use historical messages.
             * @default false
             */
            use_hist: boolean;
            /**
             * Filter Limit
             * @description The limit count(<0) or max len(>0) to filter historical messages.
             * @default -500
             */
            filter_limit: number | null;
            /**
             * Filter Time
             * @description The timestamp to filter historical messages.
             * @default 0
             */
            filter_time: number | null;
            /**
             * Messages
             * @description A list of message objects representing the current conversation. If no messages are provided and `use_hist` is set to `True`, the system will filter existing chat history using the fields `username`, `user_id`, and `filter_time`. If `messages` are provided, the last user message will be used as the question.
             */
            messages?: components["schemas"]["ChatMessage"][] | null;
            /** Params */
            params?: components["schemas"]["CompletionParams"][] | null;
        };
        /** Token */
        Token: {
            /** Access Token */
            access_token: string;
            /** Token Type */
            token_type: string;
        };
        /**
         * ToolRequest
         * @example {
         *       "messages": [
         *         {
         *           "content": "请根据用户的提问分析意图，请转换用户的问题，提取所需的关键参数，并自动选择最合适的工具进行处理。",
         *           "role": "system"
         *         },
         *         {
         *           "content": "请告诉我 2023-11-22 前面三周的日期范围。",
         *           "role": "user"
         *         }
         *       ],
         *       "model_id": -1,
         *       "model_name": "moonshot",
         *       "prompt": "",
         *       "temperature": 0.01,
         *       "tools": [],
         *       "top_p": 0.95
         *     }
         */
        ToolRequest: {
            /** Messages */
            messages?: components["schemas"]["ChatMessage"][] | null;
            /** Tools */
            tools?: unknown[] | null;
            /** Prompt */
            prompt?: string | null;
            /**
             * Model Name
             * @default moonshot
             */
            model_name: string;
            /**
             * Model Id
             * @default -1
             */
            model_id: number;
            /**
             * Top P
             * @default 0.95
             */
            top_p: number;
            /**
             * Temperature
             * @default 0.01
             */
            temperature: number;
        };
        /** TranslateRequest */
        TranslateRequest: {
            /**
             * Text
             * @default 你好我的朋友。
             */
            text: string;
            /**
             * Source
             * @default auto
             */
            source: string;
            /**
             * Target
             * @default auto
             */
            target: string;
            /**
             * Platform
             * @default baidu
             */
            platform: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    register_user_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Registration"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    authenticate_user_authenticate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    protected_protected_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    secure_route_secure_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    refresh_access_token_refresh_token_post: {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_admin__get: {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_user__get: {
        parameters: {
            query?: {
                token?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    web_search_web_search__text__get: {
        parameters: {
            query?: {
                platform?: string;
            };
            header?: never;
            path: {
                text: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    retrieval_retrieval__text__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                text: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    embeddings_embeddings_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmbeddingRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    fuzzy_matches_fuzzy_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FuzzyMatchRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    classify_text_classify_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClassifyRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    knowledge_knowledge__post: {
        parameters: {
            query: {
                text: string;
                rerank_model?: string | null;
                version?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_knowledge_knowledge__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    nlp_nlp__get: {
        parameters: {
            query: {
                text: string;
                nlp_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    text_tools_tools_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToolRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assistant_run_assistant__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssistantRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_text_llm_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompletionParams"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_message_message__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatCompletionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    chat_completions_v1_chat_completions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OpenAIRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_models_v1_models_get: {
        parameters: {
            query?: {
                /** @description Retrieves a model instance, providing basic information about the model such as the owner and permissioning. e.g., 'moonshot', 'glm', 'qwen', 'ernie', 'hunyuan', 'doubao','spark','baichuan','deepseek' or custom models. */
                model?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_messages_get_messages__get: {
        parameters: {
            query?: {
                user_name?: string;
                robot_id?: string;
                user_id?: string;
                filter_time?: number;
                agent?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_messages_submit_messages_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmitMessagesRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    response_message_message__task_id__get: {
        parameters: {
            query?: {
                /** @description Enable streaming response if set to True. */
                stream?: boolean;
                /** @description Controls randomness. Lower values make output more focused and deterministic, while higher values increase creativity. */
                temperature?: number;
                /** @description Nucleus sampling parameter. Limits the response to the smallest set of tokens whose cumulative probability exceeds this value. */
                top_p?: number;
                /** @description The maximum number of tokens the model can generate in the response. */
                max_tokens?: number | null;
                /** @description The initial context or system message to guide the AI's behavior. */
                prompt?: string | null;
                /** @description The main question or user prompt for the AI to respond to. */
                question?: string | null;
                /** @description Contextual identifier for different use cases, enabling selection of appropriate system behavior. */
                agent?: string | null;
                /** @description Specify the model to use, e.g., 'moonshot', 'glm', 'qwen', 'ernie', 'hunyuan', 'doubao','spark','baichuan' or custom models. */
                model_name?: string;
                /** @description An optional model ID for selecting different versions or configurations of a model. */
                model_id?: number;
                /** @description Specify the type of content to extract from the AI's response (e.g., key phrases, summaries). */
                extract?: string | null;
                /** @description A list of keywords used to guide the retrieval of relevant information or sources based on search terms. */
                keywords?: string[] | null;
            };
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_status_task__task_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    execute_task_execute_task__post: {
        parameters: {
            query: {
                task_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_location_location__get: {
        parameters: {
            query: {
                query: string;
                /** @description Region or city to limit the search */
                region?: string;
                platform?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    translate_text_translate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TranslateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_file_upload_post: {
        parameters: {
            query?: {
                oss_expires?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_file_upload_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    file_handler_files__filename__get: {
        parameters: {
            query?: {
                url?: string;
            };
            header?: never;
            path: {
                filename: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_wechat_scheduler_send_wechat_scheduler_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_send_wechat_scheduler_send_wechat_scheduler_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_page__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    image_recognition_ocr_post: {
        parameters: {
            query?: {
                ocr_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_image_recognition_ocr_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_image_visual_post: {
        parameters: {
            query?: {
                style_name?: string;
                model_id?: number;
                return_url?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_generate_image_visual_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    speech_to_text_asr_post: {
        parameters: {
            query?: {
                platform?: components["schemas"]["PlatformEnum"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_speech_to_text_asr_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    text_to_audio_tts_post: {
        parameters: {
            query: {
                sentences: string;
                platform?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    text_to_image_tti_post: {
        parameters: {
            query: {
                prompt: string;
                negative_prompt?: string;
                style_name?: string;
                model_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    image_understanding_iu_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_image_understanding_iu_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    files_process_fp_post: {
        parameters: {
            query?: {
                question?: string;
                model_name?: string;
                model_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_files_process_fp_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ppt_create_ppt_get: {
        parameters: {
            query: {
                /** @description 用于生成PPT的文本内容 */
                text: string;
                templateid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
